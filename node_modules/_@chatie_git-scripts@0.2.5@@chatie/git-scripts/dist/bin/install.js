#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const pkg_up_1 = __importDefault(require("pkg-up"));
const PRE_PUSH_CMD = 'npx git-scripts-pre-push';
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const cwd = path_1.default.join(__dirname, // bin
        '..', // dist
        '..', // root
        '..');
        const pkgFile = yield pkg_up_1.default({ cwd });
        if (!pkgFile) {
            return 0;
        }
        const pkg = require(pkgFile);
        if (pkg && pkg.git && pkg.git.scripts && pkg.git.scripts['pre-push']) {
            // there's a existing pre-push value
            return 0;
        }
        pkg.git = pkg.git || {};
        pkg.git.scripts = Object.assign({}, pkg.git.scripts, { 'pre-push': PRE_PUSH_CMD });
        const jsonText = JSON.stringify(pkg, null, 2);
        const promiseWriteFile = util_1.default.promisify(fs_1.default.writeFile);
        yield promiseWriteFile(pkgFile, jsonText);
        return 0;
    });
}
main()
    .then(process.exit)
    .catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=install.js.map